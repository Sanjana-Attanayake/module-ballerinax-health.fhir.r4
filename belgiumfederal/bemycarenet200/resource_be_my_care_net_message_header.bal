// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.


import ballerina/constraint;
import ballerinax/health.fhir.r4;

public const string PROFILE_BASE_BEMYCARENETMESSAGEHEADER = "https://www.ehealth.fgov.be/standards/fhir/mycarenet/StructureDefinition/be-messageheader";
public const RESOURCE_NAME_BEMYCARENETMESSAGEHEADER = "MessageHeader";

# FHIR BeMyCareNetMessageHeader resource record.
#
# + resourceType - The type of the resource describes
# + eventUri - Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value 'http://terminology.hl7.org/CodeSystem/message-events'. Alternatively uri to the EventDefinition.
# + reason - Coded indication of the cause for the event - indicates a reason for the occurrence of the event that is a focus of this message.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + author - The logical author of the message - the person or device that decided the described event should happen. When there is more than one candidate, pick the most proximal to the MessageHeader. Can provide other authors in extensions.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + destination - The destination application which the message is intended for.
# + focus - The actual data of the message - a reference to the root/focus class of the event.
# + language - The base language in which the resource is written.
# + 'source - The source application from which this message originated.
# + eventCoding - Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value 'http://terminology.hl7.org/CodeSystem/message-events'. Alternatively uri to the EventDefinition.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + sender - Identifies the sending system to allow the use of a trust relationship.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + response - Information about the message that this message is a response to. Only present if this message is a response.
# + responsible - The person or organization that accepts overall responsibility for the contents of the message. The implication is that the message event happened under the policies of the responsible party.
# + enterer - The person or device that performed the data entry leading to this message. When there is more than one candidate, pick the most proximal to the message. Can provide other enterers in extensions.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + definition - Permanent link to the MessageDefinition for this message.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.

@r4:ResourceDefinition {
    resourceType: "MessageHeader",
    baseType: r4:DomainResource,
    profile: "https://www.ehealth.fgov.be/standards/fhir/mycarenet/StructureDefinition/be-messageheader",
    elements: {
        "eventUri" : {
            name: "eventUri",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "MessageHeader.event[x]",
            valueSet: "http://hl7.org/fhir/ValueSet/message-events"
        },

        "reason" : {
            name: "reason",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 0,
            isArray: false,
            path: "MessageHeader.reason",
            valueSet: "http://hl7.org/fhir/ValueSet/message-reason-encounter"
        },

        "extension" : {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "MessageHeader.extension"
        },

        "author" : {
            name: "author",
            dataType: r4:Reference,
            min: 0,
            max: 0,
            isArray: false,
            path: "MessageHeader.author"
        },

        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "MessageHeader.modifierExtension"
        },

        "destination" : {
            name: "destination",
            dataType: BeMyCareNetMessageHeaderDestination,
            min: 1,
            max: 1,
            isArray: true,
            path: "MessageHeader.destination"
        },

        "focus" : {
            name: "focus",
            dataType: BeMyCareNetMessageHeaderFocus,
            min: 1,
            max: 1,
            isArray: true,
            path: "MessageHeader.focus"
        },

        "language" : {
            name: "language",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "MessageHeader.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },

        "source" : {
            name: "source",
            dataType: BeMyCareNetMessageHeaderSource,
            min: 1,
            max: 1,
            isArray: false,
            path: "MessageHeader.source"
        },

        "eventCoding" : {
            name: "eventCoding",
            dataType: BeMyCareNetMessageHeaderEvent,
            min: 0,
            max: 1,
            isArray: false,
            path: "MessageHeader.event[x]",
            valueSet: "http://hl7.org/fhir/ValueSet/message-events"
        },

        "contained" : {
            name: "contained",
            dataType: r4:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "MessageHeader.contained"
        },

        "sender" : {
            name: "sender",
            dataType: BeMyCareNetMessageHeaderSender,
            min: 1,
            max: 1,
            isArray: false,
            path: "MessageHeader.sender"
        },

        "meta" : {
            name: "meta",
            dataType: BeMyCareNetMessageHeaderMeta,
            min: 1,
            max: 1,
            isArray: false,
            path: "MessageHeader.meta"
        },

        "response" : {
            name: "response",
            dataType: BeMyCareNetMessageHeaderResponse,
            min: 0,
            max: 1,
            isArray: false,
            path: "MessageHeader.response"
        },

        "responsible" : {
            name: "responsible",
            dataType: r4:Reference,
            min: 0,
            max: 0,
            isArray: false,
            path: "MessageHeader.responsible"
        },

        "enterer" : {
            name: "enterer",
            dataType: r4:Reference,
            min: 0,
            max: 0,
            isArray: false,
            path: "MessageHeader.enterer"
        },

        "implicitRules" : {
            name: "implicitRules",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "MessageHeader.implicitRules"
        },

        "definition" : {
            name: "definition",
            dataType: r4:canonical,
            min: 0,
            max: 0,
            isArray: false,
            path: "MessageHeader.definition"
        },

        "id" : {
            name: "id",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            path: "MessageHeader.id"
        },

        "text" : {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "MessageHeader.text"
        }

    },

    serializers: {
        'xml: r4:fhirResourceXMLSerializer,
        'json: r4:fhirResourceJsonSerializer
    }
}

public type BeMyCareNetMessageHeader record {|
    *r4:DomainResource;

    RESOURCE_NAME_BEMYCARENETMESSAGEHEADER resourceType = RESOURCE_NAME_BEMYCARENETMESSAGEHEADER;

    r4:uri eventUri?;
    r4:CodeableConcept reason?;
    r4:Extension [] extension?;
    r4:Reference author?;
    r4:Extension [] modifierExtension?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.MessageHeader.destination constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.MessageHeader.destination constraint. This field must be an array containing at most one item."
        }
    }
    BeMyCareNetMessageHeaderDestination [] destination;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.MessageHeader.focus constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.MessageHeader.focus constraint. This field must be an array containing at most one item."
        }
    }
    BeMyCareNetMessageHeaderFocus [] focus;
    r4:code language?;
    BeMyCareNetMessageHeaderSource 'source;
    BeMyCareNetMessageHeaderEvent eventCoding?;
    r4:Resource [] contained?;
    BeMyCareNetMessageHeaderSender sender;
    BeMyCareNetMessageHeaderMeta meta;
    BeMyCareNetMessageHeaderResponse response?;
    r4:Reference responsible?;
    r4:Reference enterer?;
    r4:uri implicitRules?;
    r4:canonical definition?;
    string id;
    r4:Narrative text?;
    r4:Element ...;
|};

# FHIR BeMyCareNetMessageHeaderSender datatype record.
#
# + reference - A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
# + identifier - An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + display - Plain text narrative that identifies the resource in addition to the resource reference.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent. The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. 'Patient' is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).

@r4:DataTypeDefinition {
    name: "BeMyCareNetMessageHeaderSender",
    baseType: (),
    elements: {
        "reference": {
            name: "reference",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.",
            path: "MessageHeader.sender.reference"
        },

        "identifier": {
            name: "identifier",
            dataType: r4:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.",
            path: "MessageHeader.sender.identifier"
        },

        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "MessageHeader.sender.extension"
        },

        "display": {
            name: "display",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Plain text narrative that identifies the resource in addition to the resource reference.",
            path: "MessageHeader.sender.display"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "MessageHeader.sender.id"
        },

        "type": {
            name: "type",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent. The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. 'Patient' is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).",
            path: "MessageHeader.sender.type"
        }
    },

    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}

public type BeMyCareNetMessageHeaderSender record {|
    *r4:Reference;

    string reference;
    r4:Identifier identifier?;
    r4:Extension [] extension?;
    string display?;
    string id?;
    r4:uri 'type?;
|};


# BeMyCareNetMessageHeaderResponseCode enum
public enum BeMyCareNetMessageHeaderResponseCode {
    CODE_CODE_FATAL_ERROR = "fatal-error",
    CODE_CODE_OK = "ok",
    CODE_CODE_TRANSIENT_ERROR = "transient-error"
}

# FHIR BeMyCareNetMessageHeaderFocus datatype record.
#
# + reference - A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
# + identifier - An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + display - Plain text narrative that identifies the resource in addition to the resource reference.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent. The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. 'Patient' is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).

@r4:DataTypeDefinition {
    name: "BeMyCareNetMessageHeaderFocus",
    baseType: (),
    elements: {
        "reference": {
            name: "reference",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.",
            path: "MessageHeader.focus.reference"
        },

        "identifier": {
            name: "identifier",
            dataType: r4:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.",
            path: "MessageHeader.focus.identifier"
        },

        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "MessageHeader.focus.extension"
        },

        "display": {
            name: "display",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Plain text narrative that identifies the resource in addition to the resource reference.",
            path: "MessageHeader.focus.display"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "MessageHeader.focus.id"
        },

        "type": {
            name: "type",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent. The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. 'Patient' is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).",
            path: "MessageHeader.focus.type"
        }
    },

    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}

public type BeMyCareNetMessageHeaderFocus record {|
    *r4:Reference;

    string reference;
    r4:Identifier identifier?;
    r4:Extension [] extension?;
    string display?;
    string id?;
    r4:uri 'type?;
|};


# FHIR BeMyCareNetMessageHeaderMeta datatype record.
#
# + lastUpdated - When the resource last changed - e.g. when the version changed.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + security - Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.
# + versionId - The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.
# + profile - A list of profiles (references to [StructureDefinition](http://hl7.org/fhir/R4/structuredefinition.html#) resources) that this resource claims to conform to. The URL is a reference to [StructureDefinition.url](http://hl7.org/fhir/R4/structuredefinition-definitions.html#StructureDefinition.url).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'source - A uri that identifies the source system of the resource. This provides a minimal amount of [Provenance](http://hl7.org/fhir/R4/provenance.html#) information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.
# + tag - Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.

@r4:DataTypeDefinition {
    name: "BeMyCareNetMessageHeaderMeta",
    baseType: (),
    elements: {
        "lastUpdated": {
            name: "lastUpdated",
            dataType: r4:instant,
            min: 0,
            max: 1,
            isArray: false,
            description: "When the resource last changed - e.g. when the version changed.",
            path: "MessageHeader.meta.lastUpdated"
        },

        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "MessageHeader.meta.extension"
        },

        "security": {
            name: "security",
            dataType: r4:Coding,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.",
            path: "MessageHeader.meta.security"
        },

        "versionId": {
            name: "versionId",
            dataType: r4:id,
            min: 0,
            max: 1,
            isArray: false,
            description: "The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.",
            path: "MessageHeader.meta.versionId"
        },

        "profile": {
            name: "profile",
            dataType: r4:canonical,
            min: 1,
            max: 1,
            isArray: true,
            description: "A list of profiles (references to [StructureDefinition](http://hl7.org/fhir/R4/structuredefinition.html#) resources) that this resource claims to conform to. The URL is a reference to [StructureDefinition.url](http://hl7.org/fhir/R4/structuredefinition-definitions.html#StructureDefinition.url).",
            path: "MessageHeader.meta.profile"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "MessageHeader.meta.id"
        },

        "source": {
            name: "source",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "A uri that identifies the source system of the resource. This provides a minimal amount of [Provenance](http://hl7.org/fhir/R4/provenance.html#) information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.",
            path: "MessageHeader.meta.source"
        },

        "tag": {
            name: "tag",
            dataType: r4:Coding,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.",
            path: "MessageHeader.meta.tag"
        }
    },

    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}

public type BeMyCareNetMessageHeaderMeta record {|
    *r4:Meta;

    r4:instant lastUpdated?;
    r4:Extension [] extension?;
    r4:Coding [] security?;
    r4:id versionId?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.MessageHeader.meta.profile constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.MessageHeader.meta.profile constraint. This field must be an array containing at most one item."
        }
    }
    r4:canonical [] profile;
    string id?;
    r4:uri 'source?;
    r4:Coding [] tag?;
|};


# FHIR BeMyCareNetMessageHeaderSource datatype record.
#
# + endpoint - Identifies the routing target to send acknowledgements to.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + software - May include configuration or other information useful in debugging.
# + contact - An e-mail, phone, website or other contact point to use to resolve issues with message communications.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - Human-readable name for the source system.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'version - Can convey versions of multiple systems in situations where a message passes through multiple hands.

@r4:DataTypeDefinition {
    name: "BeMyCareNetMessageHeaderSource",
    baseType: (),
    elements: {
        "endpoint": {
            name: "endpoint",
            dataType: r4:urlType,
            min: 1,
            max: 1,
            isArray: false,
            description: "Identifies the routing target to send acknowledgements to.",
            path: "MessageHeader.source.endpoint"
        },

        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "MessageHeader.source.extension"
        },

        "software": {
            name: "software",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "May include configuration or other information useful in debugging.",
            path: "MessageHeader.source.software"
        },

        "contact": {
            name: "contact",
            dataType: r4:ContactPoint,
            min: 0,
            max: 1,
            isArray: false,
            description: "An e-mail, phone, website or other contact point to use to resolve issues with message communications.",
            path: "MessageHeader.source.contact"
        },

        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "MessageHeader.source.modifierExtension"
        },

        "name": {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Human-readable name for the source system.",
            path: "MessageHeader.source.name"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "MessageHeader.source.id"
        },

        "version": {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Can convey versions of multiple systems in situations where a message passes through multiple hands.",
            path: "MessageHeader.source.version"
        }
    },

    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}

public type BeMyCareNetMessageHeaderSource record {|
    *r4:BackboneElement;

    r4:urlType endpoint;
    r4:Extension [] extension?;
    string software?;
    r4:ContactPoint contact?;
    r4:Extension [] modifierExtension?;
    string name?;
    string id?;
    string 'version?;
|};


# FHIR BeMyCareNetMessageHeaderDestination datatype record.
#
# + endpoint - Indicates where the message should be routed to.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + receiver - Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn't sufficient.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - Human-readable name for the target system.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + target - Identifies the target end system in situations where the initial message transmission is to an intermediary system.

@r4:DataTypeDefinition {
    name: "BeMyCareNetMessageHeaderDestination",
    baseType: (),
    elements: {
        "endpoint": {
            name: "endpoint",
            dataType: r4:urlType,
            min: 1,
            max: 1,
            isArray: false,
            description: "Indicates where the message should be routed to.",
            path: "MessageHeader.destination.endpoint"
        },

        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "MessageHeader.destination.extension"
        },

        "receiver": {
            name: "receiver",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn't sufficient.",
            path: "MessageHeader.destination.receiver"
        },

        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "MessageHeader.destination.modifierExtension"
        },

        "name": {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Human-readable name for the target system.",
            path: "MessageHeader.destination.name"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "MessageHeader.destination.id"
        },

        "target": {
            name: "target",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Identifies the target end system in situations where the initial message transmission is to an intermediary system.",
            path: "MessageHeader.destination.target"
        }
    },

    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}

public type BeMyCareNetMessageHeaderDestination record {|
    *r4:BackboneElement;

    r4:urlType endpoint;
    r4:Extension [] extension?;
    r4:Reference receiver?;
    r4:Extension [] modifierExtension?;
    string name?;
    string id?;
    r4:Reference target?;
|};


# FHIR BeMyCareNetMessageHeaderEvent datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + userSelected - Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).
# + display - A representation of the meaning of the code in the system, following the rules of the system.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'version - The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.

@r4:DataTypeDefinition {
    name: "BeMyCareNetMessageHeaderEvent",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "MessageHeader.event[x].extension"
        },

        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "MessageHeader.event[x].code"
        },

        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "MessageHeader.event[x].system"
        },

        "userSelected": {
            name: "userSelected",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).",
            path: "MessageHeader.event[x].userSelected"
        },

        "display": {
            name: "display",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A representation of the meaning of the code in the system, following the rules of the system.",
            path: "MessageHeader.event[x].display"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "MessageHeader.event[x].id"
        },

        "version": {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.",
            path: "MessageHeader.event[x].version"
        }
    },

    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}

public type BeMyCareNetMessageHeaderEvent record {|
    *r4:Coding;

    r4:Extension [] extension?;
    r4:code code;
    r4:uri system;
    boolean userSelected?;
    string display?;
    string id?;
    string 'version?;
|};


# FHIR BeMyCareNetMessageHeaderResponse datatype record.
#
# + identifier - The MessageHeader.id of the message to which this message is a response.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + details - Full details of any issues found in the message.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.

@r4:DataTypeDefinition {
    name: "BeMyCareNetMessageHeaderResponse",
    baseType: (),
    elements: {
        "identifier": {
            name: "identifier",
            dataType: r4:id,
            min: 1,
            max: 1,
            isArray: false,
            description: "The MessageHeader.id of the message to which this message is a response.",
            path: "MessageHeader.response.identifier"
        },

        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "MessageHeader.response.extension"
        },

        "code": {
            name: "code",
            dataType: BeMyCareNetMessageHeaderResponseCode,
            min: 1,
            max: 1,
            isArray: false,
            description: "Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not.",
            path: "MessageHeader.response.code"
        },

        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "MessageHeader.response.modifierExtension"
        },

        "details": {
            name: "details",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Full details of any issues found in the message.",
            path: "MessageHeader.response.details"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "MessageHeader.response.id"
        }
    },

    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}

public type BeMyCareNetMessageHeaderResponse record {|
    *r4:BackboneElement;

    r4:id identifier;
    r4:Extension [] extension?;
    BeMyCareNetMessageHeaderResponseCode code;
    r4:Extension [] modifierExtension?;
    r4:Reference details?;
    string id?;
|};


