// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r4;

@r4:DataTypeDefinition {
    name: "BeAddress",
    baseType: (),
    elements: {
        "country": {
            name: "country",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Country - a nation as commonly understood or generally accepted. Concerning the codification of the country, the FHIR specification defines its country field as a string and suggests using a ISO 3166 2 or 3 letter codes. As that 2-letter format is also the standard in a KMEHR address, it is hence RECOMMENDED to codify the country in the same way as in KMEHR.",
            path: "Address.country"
        },

        "period": {
            name: "period",
            dataType: r4:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "Time period when address was/is in use.",
            path: "Address.period"
        },

        "city": {
            name: "city",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The name of the city, town, suburb, village or other community or delivery center.",
            path: "Address.city"
        },

        "use": {
            name: "use",
            dataType: BeAddressUse,
            min: 0,
            max: 1,
            isArray: false,
            description: "The purpose of this address.",
            path: "Address.use"
        },

        "line": {
            name: "line",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "This component contains the house number, apartment number, street name, street direction, P.O. Box number, delivery hints, and similar address information. It is always RECOMMENDED to give these elements seperately using the defined extensions.",
            path: "Address.line"
        },

        "district": {
            name: "district",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The name of the administrative area (county).",
            path: "Address.district"
        },

        "postalCode": {
            name: "postalCode",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A postal code designating a region defined by the postal service.",
            path: "Address.postalCode"
        },

        "text": {
            name: "text",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.",
            path: "Address.text"
        },

        "state": {
            name: "state",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).",
            path: "Address.state"
        },

        "'type": {
            name: "'type",
            dataType: BeAddressType,
            min: 0,
            max: 1,
            isArray: false,
            description: "Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
            path: "Address.type"
        },

        "value": {
            name: "value",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual value",
            path: "Address.line.value"
        }

    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type BeAddress record {|
    *r4:Address;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    r4:Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)

    string country?;
    r4:Period period?;
    string city?;
    BeAddressUse use?;
    string[] line?;
    string district?;
    string postalCode?;
    string text?;
    string state?;
    BeAddressType 'type?;
    string value?;
|};

public enum BeAddressUse {
    CODE_BEADDRESSUSE_TEMP = "temp",
    CODE_BEADDRESSUSE_WORK = "work",
    CODE_BEADDRESSUSE_OLD = "old",
    CODE_BEADDRESSUSE_HOME = "home",
    CODE_BEADDRESSUSE_BILLING = "billing"
};

public enum BeAddressType {
    CODE_BEADDRESSTYPE_POSTAL = "postal",
    CODE_BEADDRESSTYPE_PHYSICAL = "physical",
    CODE_BEADDRESSTYPE_BOTH = "both"
};

@r4:DataTypeDefinition {
    name: "BeCodedAnnotation",
    baseType: (),
    elements: {
        "authorReference": {
            name: "authorReference",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The individual responsible for making the annotation.",
            path: "Annotation.author[x]"
        },

        "time": {
            name: "time",
            dataType: r4:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "Indicates when this particular annotation was made.",
            path: "Annotation.time"
        },

        "text": {
            name: "text",
            dataType: r4:markdown,
            min: 1,
            max: 1,
            isArray: false,
            description: "The text of the annotation in markdown format.",
            path: "Annotation.text"
        }

    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type BeCodedAnnotation record {|
    *r4:Annotation;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    r4:Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)

    r4:Reference authorReference?;
    r4:dateTime time?;
    r4:markdown text;
|};

